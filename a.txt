/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */


const {onRequest} = require("firebase-functions/v2/https");
const express = require('express');
const logger = require("firebase-functions/logger");

const app = express();

const sql = require("mssql");

const config = {
  user: "ariTime",
  password: "Timesharedata1",
  server: "timeshare.database.windows.net",
  port: 1433,
  database: "TimeShare",
  authentication: {
    type: "default",
  },
  options: {
    encrypt: true,
  },
};

app.get('/sql', async (request, response) => {
    logger.info("Hello logs!", { structuredData: true });
    response.send("Hello from Firebase!");

    // Uncomment and configure the following code if you need to connect to a database
    // try {
    //     const pool = await sql.connect(config);
    //     const result = await pool.request().query(req.query.sql);
    //     res.json(result.recordset);
    // } catch (err) {
    //     res.status(500).send(err.message);
    // }
});

exports.app = onRequest(app);



/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */


const {onRequest} = require("firebase-functions/v2/https");
const express = require('express');
const app = express();

const sql = require("mssql");

const config = {
  user: "ariTime",
  password: "Timesharedata1",
  server: "timeshare.database.windows.net",
  port: 1433,
  database: "TimeShare",
  authentication: {
    type: "default",
  },
  options: {
    encrypt: true,
  },
};

app.get('/sql', async (request, response) => {
  try {
    const pool = await sql.connect(config);
    const result = await pool.request().query(request.query.sql);
    const string = "Query executed successfully result:";
    response.send(string + JSON.stringify(result.recordset));
  } catch (err) {
    response.status(500).send(err.message);
  }
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

exports.app = onRequest(app);


/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */


const {onRequest} = require("firebase-functions/v2/https");


const sql = require("mssql");

const config = {
  user: "ariTime",
  password: "Timesharedata1",
  server: "timeshare.database.windows.net",
  port: 1433,
  database: "TimeShare",
  authentication: {
    type: "default",
  },
  options: {
    encrypt: true,
  },
};

exports.app = onRequest(async (request, response) => {
  try {
    const pool = await sql.connect(config);
    const result = await pool.request().query(request.query.sql);
    const string = "Query executed successfully result:";
    response.send(string + JSON.stringify(result.recordset));
  } catch (err) {
    response.status(500).send(err.message);
  }
});



/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */


const {onRequest} = require("firebase-functions/v2/https");
const express = require("express");
const app = express();

const sql = require("mssql");

const config = {
  user: "ariTime",
  password: "Timesharedata1",
  server: "timeshare.database.windows.net",
  port: 1433,
  database: "TimeShare",
  authentication: {
    type: "default",
  },
  options: {
    encrypt: true,
  },
};

app.get("/sql", async (request, response) => {
  try {
    const pool = await sql.connect(config);
    const result = await pool.request().query(request.query.sql);
    const string = "Query executed successfully result:";
    response.send(string + JSON.stringify(result.recordset));
  } catch (err) {
    response.status(500).send(err.message);
  }
});

const PORT = process.env.PORT || 8080;

/**
 * Starts the Express server on the specified port.
 * If the port is already in use, it tries the next port number.
 *
 * @param {number} port - The port number to start the server on.
 */
function startServer(port) {
  app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
  }).on("error", (err) => {
    if (err.code === "EADDRINUSE") {
      console.warn(`Port ${port} is in use, trying another port...`);
      startServer(port + 1);
    } else {
      console.error(err);
    }
  });
}

startServer(PORT);

exports.app = onRequest(app);
